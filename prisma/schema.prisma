// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["dataproxy"]
}

model User{
  userId String @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  email String? @unique
  emailVerified DateTime? @map("email_verified")
  image String?
  role Role @default(USER)
  firstName String?
  name String?
  lastName String?
  phoneNo Int?
  password String?
  favouriteBooks Book[]
  accounts Account[]
  sessions Session[]
  @@map(name: "users")
}

model Account {
  id                 String  @id @default(uuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  ADMIN
  USER
}

model Book{
  bookId String @id @default(uuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
  cover String
  title String
  category String
  content String
  description String
  totalPages Int
  year Int
  users User? @relation(fields: [usersId], references: [userId])
  usersId String?
}

model Feedback {
  fbId      String     @id @default(uuid())
  firstName String?
  email String?
  lastName String?
  message String?
  phoneNo Int?
  userId String?
}

model Feed {
  fbId      String     @id @default(uuid())
  firstName String?
  email String?
  lastName String?
  message String?
  phoneNo Int?
}